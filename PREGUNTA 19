import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, coint
from statsmodels.tsa.vector_ar.var_model import VAR
from statsmodels.tsa.vector_ar.vecm import VECM




# =============================================
# 1. Carga y preparación de datos
# =============================================

# Datos proporcionados
datos_3m = [12.92000, 14.28000, 13.31000, 13.34000, 12.71000, 13.08000, 11.86000, 9.000000, 8.190000, 7.970000, 8.350000, 8.200000, 8.120000, 8.390000, 8.660000, 8.510000, 8.500000, 9.140000, 9.450000, 9.740000, 9.360000, 8.990000, 9.110000, 9.360000, 9.260000, 9.460000, 9.890000, 10.07000, 10.22000, 10.26000, 10.53000, 10.90000, 10.80000, 10.12000, 8.920000, 8.340000, 8.020000, 8.560000, 8.830000, 8.220000, 7.730000, 7.180000, 7.320000, 7.370000, 7.330000, 7.400000, 7.480000, 7.330000, 7.300000, 7.290000, 6.760000, 6.240000, 6.330000, 6.400000, 6.000000, 5.690000, 5.350000, 5.320000, 5.500000, 5.680000, 5.580000, 5.750000, 5.770000, 5.820000, 5.850000, 5.850000, 5.880000, 6.230000, 6.620000, 6.350000, 5.890000, 5.960000, 6.000000, 5.840000, 5.870000, 6.080000, 6.450000, 6.660000, 6.950000, 7.300000, 7.480000, 7.600000, 8.030000, 8.350000, 8.560000, 8.840000, 9.140000, 8.960000, 8.740000, 8.430000, 8.150000, 8.170000, 8.010000, 7.900000, 7.940000, 7.880000, 7.900000, 8.000000, 8.170000, 8.040000, 8.010000, 7.990000, 7.870000, 7.690000, 7.600000, 7.400000, 7.290000, 6.950000, 6.410000, 6.120000, 6.090000, 5.830000, 5.630000, 5.750000, 5.750000, 5.500000, 5.370000, 5.140000, 4.690000, 4.180000, 3.910000, 3.950000, 4.140000, 3.840000, 3.720000, 3.750000, 3.280000, 3.200000, 2.970000, 2.930000, 3.210000, 3.290000, 3.070000, 2.990000, 3.010000, 2.930000, 3.030000, 3.140000, 3.110000, 3.090000, 3.010000, 3.090000, 3.180000, 3.130000, 3.040000, 3.330000, 3.590000, 3.780000, 4.270000, 4.250000, 4.460000, 4.610000, 4.750000, 5.100000, 5.450000, 5.760000, 5.900000, 5.940000, 5.910000, 5.840000, 5.850000, 5.640000, 5.590000, 5.570000, 5.430000, 5.440000, 5.520000, 5.290000, 5.150000, 4.960000, 5.100000, 5.090000, 5.150000, 5.230000, 5.300000, 5.190000, 5.240000, 5.120000, 5.170000, 5.040000, 5.170000, 5.140000, 5.280000, 5.300000, 5.200000, 5.070000, 5.190000, 5.280000, 5.080000, 5.110000, 5.280000, 5.300000, 5.180000, 5.230000, 5.160000, 5.080000, 5.140000, 5.120000, 5.090000, 5.040000, 4.740000, 4.070000, 4.530000, 4.500000, 4.450000, 4.560000, 4.570000, 4.410000, 4.630000, 4.720000, 4.690000, 4.870000, 4.820000, 5.020000, 5.230000, 5.360000, 5.500000, 5.730000, 5.860000, 5.820000, 5.990000, 5.860000, 6.14000, 6.28000, 6.18000, 6.29000, 6.36000, 5.94000, 5.29000, 5.01000, 4.54000, 3.97000, 3.70000, 3.57000]

datos_6m = [13.90000, 14.81000, 13.83000, 13.87000, 13.13000, 13.76000, 12.80000, 10.51000, 9.830000, 8.630000, 8.800000, 8.590000, 8.330000, 8.650000, 8.860000, 8.780000, 8.700000, 9.440000, 9.850000, 10.16000, 9.730000, 9.390000, 9.480000, 9.760000, 9.560000, 9.770000, 10.27000, 10.47000, 11.02000, 11.24000, 11.27000, 11.37000, 11.19000, 10.52000, 9.340000, 8.760000, 8.450000, 8.870000, 9.450000, 8.710000, 8.070000, 7.460000, 7.570000, 7.710000, 7.640000, 7.710000, 7.680000, 7.500000, 7.530000, 7.470000, 6.890000, 6.360000, 6.470000, 6.560000, 6.120000, 5.790000, 5.570000, 5.480000, 5.640000, 5.780000, 5.670000, 5.830000, 5.860000, 6.190000, 6.350000, 6.280000, 6.050000, 6.460000, 6.990000, 7.040000, 6.500000, 6.680000, 6.560000, 6.210000, 6.180000, 6.500000, 6.890000, 7.040000, 7.350000, 7.790000, 7.820000, 7.900000, 8.300000, 8.700000, 8.850000, 9.050000, 9.390000, 9.170000, 8.910000, 8.380000, 8.010000, 8.170000, 8.160000, 8.030000, 7.890000, 7.810000, 7.960000, 8.120000, 8.280000, 8.270000, 8.190000, 8.050000, 7.920000, 7.770000, 7.700000, 7.530000, 7.390000, 7.030000, 6.580000, 6.190000, 6.200000, 5.980000, 5.870000, 6.020000, 5.970000, 5.630000, 5.480000, 5.260000, 4.800000, 4.260000, 4.010000, 4.080000, 4.330000, 4.000000, 3.880000, 3.900000, 3.380000, 3.310000, 3.040000, 3.130000, 3.440000, 3.470000, 3.240000, 3.160000, 3.150000, 3.060000, 3.170000, 3.290000, 3.260000, 3.240000, 3.150000, 3.220000, 3.360000, 3.340000, 3.250000, 3.530000, 3.920000, 4.250000, 4.790000, 4.720000, 4.950000, 5.080000, 5.240000, 5.620000, 5.980000, 6.500000, 6.510000, 6.310000, 6.170000, 6.050000, 5.930000, 5.660000, 5.620000, 5.650000, 5.540000, 5.560000, 5.510000, 5.350000, 5.130000, 4.970000, 5.160000, 5.270000, 5.330000, 5.460000, 5.520000, 5.340000, 5.450000, 5.320000, 5.270000, 5.240000, 5.310000, 5.270000, 5.480000, 5.600000, 5.530000, 5.340000, 5.330000, 5.400000, 5.300000, 5.300000, 5.380000, 5.450000, 5.230000, 5.270000, 5.250000, 5.260000, 5.360000, 5.320000, 5.230000, 5.150000, 4.810000, 4.200000, 4.590000, 4.570000, 4.490000, 4.610000, 4.650000, 4.540000, 4.750000, 5.030000, 4.750000, 5.090000, 5.080000, 5.200000, 5.430000, 5.680000, 5.760000, 6.000000, 6.110000, 6.070000, 6.390000, 6.240000, 6.270000, 6.350000, 6.250000, 6.320000, 6.340000, 5.920000, 5.150000, 4.890000, 4.440000, 3.990000, 3.740000, 3.560000]

# Crear DataFrame con índice de fechas
fechas = pd.date_range(start='1982-01-01', periods=len(datos_3m), freq='M')
df = pd.DataFrame({'GS3M': datos_3m, 'GS6M': datos_6m}, index=fechas)

# =============================================
# 2. Análisis gráfico (Parte a)
# =============================================

plt.figure(figsize=(14, 7))
plt.plot(df.index, df['GS3M'], label='Tasa 3 Meses (GS3M)', linewidth=2)
plt.plot(df.index, df['GS6M'], label='Tasa 6 Meses (GS6M)', linewidth=2, linestyle='--')
plt.title('Evolución de Tasas del Tesoro a 3 y 6 Meses (1982-2001)', fontsize=16)
plt.xlabel('Fecha', fontsize=14)
plt.ylabel('Tasa (%)', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, alpha=0.3)
plt.show()

# =============================================
# 3. Pruebas de raíz unitaria (Parte b)
# =============================================

def prueba_adf(serie, nombre):
    resultado = adfuller(serie, autolag='AIC')
    print(f'\nPrueba ADF para {nombre}:')
    print(f'Estadístico ADF: {resultado[0]:.4f}')
    print(f'Valor-p: {resultado[1]:.4f}')
    print('Valores críticos:')
    for key, value in resultado[4].items():
        print(f'   {key}: {value:.4f}')
    return resultado[1]  # Retorna el valor-p

print("\n=== PRUEBAS DE RAÍZ UNITARIA ===")
pval_3m = prueba_adf(df['GS3M'], 'GS3M (niveles)')
pval_6m = prueba_adf(df['GS6M'], 'GS6M (niveles)')

# Pruebas en primeras diferencias
pval_diff_3m = prueba_adf(df['GS3M'].diff().dropna(), 'ΔGS3M (diferencias)')
pval_diff_6m = prueba_adf(df['GS6M'].diff().dropna(), 'ΔGS6M (diferencias)')

# =============================================
# 4. Prueba de cointegración (Parte c)
# =============================================

print("\n=== PRUEBA DE COINTEGRACIÓN ===")

# Método Engle-Granger
X = sm.add_constant(df['GS3M'])
modelo = sm.OLS(df['GS6M'], X).fit()
residuos = modelo.resid

pval_residuos = prueba_adf(residuos, 'Residuos de regresión cointegrante')

# Prueba directa de cointegración
score, pvalue, crit_val = coint(df['GS6M'], df['GS3M'])
print(f'\nPrueba de cointegración directa:')
print(f'Estadístico: {score:.4f}')
print(f'Valor-p: {pvalue:.4f}')
print(f'Valores críticos: {crit_val}')

# Gráfico de residuos
plt.figure(figsize=(12, 4))
plt.plot(residuos, color='purple')
plt.axhline(0, color='red', linestyle='--')
plt.title('Residuos de la relación cointegrante', fontsize=14)
plt.grid(True, alpha=0.3)
plt.show()

# =============================================
# 5. Interpretación económica (Parte d)
# =============================================

print("\n=== INTERPRETACIÓN ECONÓMICA ===")
if pvalue < 0.05:
    print("Las tasas a 3 y 6 meses están cointegradas, lo que implica:")
    print("- Existe una relación de equilibrio a largo plazo entre ambas tasas")
    print("- Las desviaciones de esta relación son temporales y se corrigen con el tiempo")
    print("- Es consistente con la teoría de expectativas de la estructura temporal de tasas")
else:
    print("No se encontró evidencia de cointegración entre las tasas, lo que sugiere:")
    print("- No hay una relación estable a largo plazo entre las tasas")
    print("- Las desviaciones podrían ser permanentes")
    print("- Implicaciones para estrategias de inversión y políticas monetarias")

# =============================================
# 6. Modelado VAR (Parte e)
# =============================================

print("\n=== MODELADO VAR/VECM ===")

if pvalue < 0.05:  # Si hay cointegración
    print("\nEstimando modelo VECM (con cointegración):")
    vecm = VECM(df, k_ar_diff=4, coint_rank=1)
    vecm_result = vecm.fit()
    print(vecm_result.summary())
    
    # Gráfico de impulso-respuesta
    irf = vecm_result.irf(10)
    irf.plot(orth=False, figsize=(12, 8))
    plt.suptitle('Funciones de Impulso-Respueta (VECM)', y=1.02)
    plt.show()
else:  # Si no hay cointegración
    print("\nEstimando modelo VAR en diferencias:")
    df_diff = df.diff().dropna()
    var = VAR(df_diff)
    resultados = var.fit(4)  # 4 rezagos
    
    print(resultados.summary())
    
    # Gráfico de impulso-respuesta
    irf = resultados.irf(10)
    irf.plot(orth=False, figsize=(12, 8))
    plt.suptitle('Funciones de Impulso-Respueta (VAR en diferencias)', y=1.02)
    plt.show()

# =============================================
# 7. Resumen de hallazgos
# =============================================

print("\n=== RESUMEN DE HALLAZGOS ===")
print("1. Análisis gráfico:")
print("- Ambas series muestran tendencia descendente a lo largo del periodo")
print("- La tasa a 6 meses es generalmente mayor que a 3 meses (prima de plazo)")
print("- Alta volatilidad en los primeros años, mayor estabilidad posterior")

print("\n2. Pruebas de raíz unitaria:")
print(f"- GS3M en niveles: {'No estacionaria' if pval_3m > 0.05 else 'Estacionaria'}")
print(f"- GS6M en niveles: {'No estacionaria' if pval_6m > 0.05 else 'Estacionaria'}")
print(f"- Ambas series son I(1) (estacionarias en primeras diferencias)")

print("\n3. Cointegración:")
print(f"- Las series {'sí' if pvalue < 0.05 else 'no'} están cointegradas")
if pvalue < 0.05:
    print(f"- Relación de largo plazo: GS6M = {modelo.params[0]:.4f} + {modelo.params[1]:.4f}*GS3M")

print("\n4. Modelado dinámico:")
if pvalue < 0.05:
    print("- Se estimó un modelo VECM para capturar relaciones de corto y largo plazo")
else:
    print("- Se estimó un modelo VAR en diferencias por ausencia de cointegración")
